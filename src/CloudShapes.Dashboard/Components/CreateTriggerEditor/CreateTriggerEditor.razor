@namespace CloudShapes.Dashboard.Components

<div class="card mb-3">
    <div class="card-header" role="button" @onclick="async _ => await OnToggleEventFilterAsync()">
        <h6>Event</h6>
    </div>
    <Collapse @ref="eventFilterCollapsible" Toggle="true">
        <div class="card-body">
            <CloudEventFilterEditor EventFilter="trigger.Event" OnChange="OnEventFilterChangedAsync" />
        </div>
    </Collapse>
</div>
<div class="card mb-3">
    <div class="card-header" role="button" @onclick="async _ => await OnToggleStateAsync()">
        <h6>State</h6>
    </div>
    <Collapse @ref="stateCollapsible" Toggle="true">
        <div class="card-body">
            <MonacoEditor @ref="stateEditor" OnTextChanged="async e => await OnStateChangedAsync(e)" />
        </div>
    </Collapse>
</div>
@if(validationErrors.Count > 0)
{
    <div class="alert alert-danger mb-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@((MarkupString)error)</li>
            }
        </ul>
    </div>
}
<div class="d-flex justify-content-between">
    <Button Color="ButtonColor.Secondary" Type="ButtonType.Button" Class="w-100 me-1" @onclick="OnCancel">Cancel</Button>
    <Button Color="ButtonColor.Primary" Type="ButtonType.Button" Class="w-100 ms-1" @onclick="OnCreateAsync">Create</Button>
</div>

@code {
    Collapse? eventFilterCollapsible;
    Collapse? stateCollapsible;
    MonacoEditor? stateEditor;
    CloudEventCreateTriggerDefinition trigger = new();
    List<string> validationErrors = [];

    [Parameter] public CloudEventCreateTriggerDefinition Trigger { get; set; } = new();

    [Parameter] public EventCallback<CloudEventCreateTriggerDefinition> OnChange { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public EventCallback<CloudEventCreateTriggerDefinition> OnCreate { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (trigger != Trigger) trigger = Trigger;
    }

    async Task OnToggleEventFilterAsync()
    {
        if (eventFilterCollapsible == null) return;
        await eventFilterCollapsible.ToggleAsync();
    }

    async Task OnToggleStateAsync()
    {
        if (eventFilterCollapsible == null) return;
        await eventFilterCollapsible.ToggleAsync();
    }

    async Task OnEventFilterChangedAsync(CloudEventFilterDefinition eventFilter)
    {
        trigger.Event = eventFilter;
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(trigger);
    }

    async Task OnStateChangedAsync(string raw)
    {
        //todo: something
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(trigger);
    }

    async Task OnCreateAsync()
    {
        validationErrors.Clear();
        if (string.IsNullOrWhiteSpace(trigger.Event.Type)) validationErrors.Add("The <b>event.type</b> must be set");
        if (!string.IsNullOrWhiteSpace(trigger.Event.Source) && !Uri.TryCreate(trigger.Event.Source, UriKind.Absolute, out _)) validationErrors.Add("The <b>event.source</b> must be an absolute uri");
        if (string.IsNullOrWhiteSpace(trigger.Event.Correlation.Attribute) && string.IsNullOrWhiteSpace(trigger.Event.Correlation.Expression)) validationErrors.Add("Either <b>event.correlation.attribute</b> or <b>event.correlation.expression</b> must be set");
        if (validationErrors.Count > 0) return;
        if (OnCreate.HasDelegate) await OnCreate.InvokeAsync(trigger);
    }

}
