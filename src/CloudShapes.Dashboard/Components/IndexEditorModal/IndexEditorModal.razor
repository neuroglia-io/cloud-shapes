@namespace CloudShapes.Dashboard.Components

<div>

    <div class="mb-3">
        <label for="name" class="form-label">Name</label><span class="ms-1 text-danger">*</span>
        <input name="name" type="text" placeholder="Name" class="form-control" @oninput="async e => await OnNameChangedAsync((string)e.Value!)" />
    </div>

    <div class="mb-3 border border-secondary-subtle rounded-1 p-3">
        <label for="name" class="form-label">Properties</label><span class="ms-1 text-danger">*</span>
        <div class="d-flex justify-content-between">
            <input name="property" type="text" class="form-control" placeholder="Property" list="properties" @bind="property" />
            <button class="btn btn-sm btn-primary" @onclick="OnAddPropertyAsync" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Plus" /></button>
        </div>
        <table class="table table-hover border border-secondary-subtle rounded-1 mt-3">
            <tbody>
                @foreach(var property in index.Properties)
                {
                    <tr>
                        <td>@property</td>
                        <td class="text-end fit"><button class="btn btn-sm btn-danger" @onclick="async _ => await OnRemovePropertyAsync(property)" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /></button></td>
                    </tr>
                }
            </tbody>
        </table>
        <datalist id="properties">
            @foreach(var property in properties)
            {
                <option value="@property">@property</option>
            }
        </datalist>
    </div>

    <div class="mb-3 border border-secondary-subtle rounded-1 p-3 d-flex justify-content-between">

        <div class="form-check form-check-inline">
            <input name="unique" type="checkbox" class="form-check-input" @oninput="async e => await OnUniqueChangedAsync((bool)e.Value!)" />
            <label for="unique" class="form-check-label">Unique</label>
        </div>

        <div class="form-check form-check-inline">
            <input name="descending" type="checkbox" class="form-check-input" @oninput="async e => await OnDescendingChangedAsync((bool)e.Value!)" />
            <label for="descending" class="form-check-label">Descending</label>
        </div>

        <div class="form-check form-check-inline">
            <input name="text" type="checkbox" class="form-check-input" @oninput="async e => await OnTextChangedAsync((bool)e.Value!)" />
            <label for="text" class="form-check-label">Text</label>
        </div>

    </div>

</div>

@if (validationErrors.Count > 0)
{
    <div class="alert alert-danger mb-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@((MarkupString)error)</li>
            }
        </ul>
    </div>
}
<div class="d-flex justify-content-between">
    <Button Color="ButtonColor.Secondary" Type="ButtonType.Button" Class="w-100 me-1" @onclick="OnCancel">Cancel</Button>
    <Button Color="ButtonColor.Primary" Type="ButtonType.Button" Class="w-100 ms-1" @onclick="OnCreateAsync">Create</Button>
</div>

@code {
    JsonSchema? schema;
    ProjectionIndexDefinition index = new();
    List<string> properties = ["_id"];
    string property = null!;
    List<string> validationErrors = [];

    [Parameter] public JsonSchema? Schema { get; set; }

    [Parameter] public ProjectionIndexDefinition Index { get; set; } = new();

    [Parameter] public EventCallback<ProjectionIndexDefinition> OnChange { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public EventCallback<ProjectionIndexDefinition> OnCreate { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (index != Index) index = Index;
        if (schema != Schema)
        {
            schema = Schema;
            properties = ["_id"];
            if (schema != null) properties.AddRange(schema.GetPrimitiveProperties());
        }
    }

    async Task OnNameChangedAsync(string name)
    {
        index.Name = name;
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(index);
    }

    async Task OnAddPropertyAsync()
    {
        if (string.IsNullOrWhiteSpace(property)) return;
        index.Properties.Add(property);
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(index);
        property = null!;
    }

    async Task OnRemovePropertyAsync(string property)
    {
        if (string.IsNullOrWhiteSpace(property)) return;
        index.Properties.Remove(property);
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(index);
    }

    async Task OnUniqueChangedAsync(bool unique)
    {
        index.Unique = unique;
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(index);
    }

    async Task OnDescendingChangedAsync(bool descending)
    {
        index.Descending = descending;
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(index);
    }

    async Task OnTextChangedAsync(bool text)
    {
        index.Text = text;
        if (OnChange.HasDelegate) await OnChange.InvokeAsync(index);
    }

    async Task OnCreateAsync()
    {
        validationErrors.Clear();
        if (string.IsNullOrWhiteSpace(index.Name)) validationErrors.Add("<b>Name</b> must be set");
        if (index.Properties.Count < 1) validationErrors.Add("At least one property is required");
        if (validationErrors.Count > 0) return;
        if (OnCreate.HasDelegate) await OnCreate.InvokeAsync(index);
    }

}
