@*
    Copyright © 2025-Present The Cloud Shapes Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace CloudShapes.Dashboard.Components

<div class="w-100 mt-n4">
    <Tabs NavStyle="NavStyle.Underline" Class="markdown-input">
        <Tab Title="Edit" Active="true">
            <Content>
                <textarea class="w-100 @heightClass overflow-scroll p-3 bg-dark-subtle border-0 resize-none" @oninput="e => OnInputAsync((string?)e.Value)"></textarea>
            </Content>
        </Tab>
        <Tab Title="Preview">
            <Content>
                <Markdown Class="@markdownClass">@value</Markdown>
            </Content>
        </Tab>
    </Tabs>
</div>

@code {
    MarkdownInputSize height = MarkdownInputSize.Normal;
    string heightClass = "h-200-px";
    string markdownClass = $"w-100 h-200-px overflow-scroll p-3 bg-dark-subtle border-0";
    string? value;

    [Parameter] public MarkdownInputSize Size { get; set; } = MarkdownInputSize.Normal;

    [Parameter] public string? Value { get; set; }

    [Parameter] public EventCallback<ChangeEventArgs> OnInput { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (height != Size)
        {
            height = Size;
            heightClass = height switch
            {
                MarkdownInputSize.Small => "h-100-px",
                MarkdownInputSize.Normal => "h-200-px",
                _ => "h-300-px"
            };
            markdownClass = $"w-100 {heightClass} overflow-scroll p-3 bg-dark-subtle border-0";
        }
        if (value != Value) value = Value;
    }

    async Task OnInputAsync(string? value)
    {
        this.value = value;
        if (OnInput.HasDelegate) await OnInput.InvokeAsync(new() { Value = value });
    }

}
