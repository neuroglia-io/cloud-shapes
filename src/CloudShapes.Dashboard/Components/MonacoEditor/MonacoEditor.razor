@*
    Copyright © 2025-Present The Cloud Shapes Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@using CloudShapes.Dashboard.Components.MonacoEditorStateManagement
@namespace CloudShapes.Dashboard.Components
@inherits StatefulComponent<MonacoEditor, MonacoEditorStore, MonacoEditorState>

<div class="d-flex justify-content-between mb-2">
    <div class="d-flex gap-2">
        <Button Outline="true" Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="Store.OnCopyToClipboard" TooltipTitle="Copy to clipboard">
            <Icon Name="IconName.Clipboard" />
        </Button>
        @if (ExtraControls != null)
        {
            @ExtraControls
        }
    </div>
    <PreferredLanguageSelector PreferredLanguageChange="Store.ToggleTextBasedEditorLanguageAsync" />
</div>
<StandaloneCodeEditor @ref="Store.TextEditor"
    ConstructionOptions="Store.StandaloneEditorConstructionOptions"
    OnDidInit="Store.OnTextBasedEditorInitAsync"
    OnDidChangeModelContent="OnDidChangeModelContent"
    CssClass="@(ClassNames ?? "h-300-px")" />

@code {

    protected string? ClassNames => Class;
    /// <summary>
    /// Gets/sets the additional css classes
    /// </summary>
    [Parameter] public string? Class { get; set; }

    [Parameter] public bool IsReadOnly { get; set; } = false;

    [Parameter] public object? Document { get; set; }

    [Parameter] public string? DocumentJson { get; set; }

    [Parameter] public string? DocumentYaml { get; set; }

    [Parameter] public EventCallback<string> OnTextChanged { get; set; }

    [Parameter] public string ModelName { get; set; } = string.Empty;

    [Parameter] public RenderFragment? ExtraControls { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Store.SetIsReadOnly(IsReadOnly);
        if (!string.IsNullOrWhiteSpace(ModelName)) Store.SetTexModelName(ModelName);
        if (Document !=  null) Store.SetDocument(Document);
        if (!string.IsNullOrWhiteSpace(DocumentJson)) Store.SetDocumentJson(DocumentJson);
        if (!string.IsNullOrWhiteSpace(DocumentYaml))  Store.SetDocumentYaml(DocumentYaml);
    }

    public void Reset()
    {
        Store.SetDocumentJson(string.Empty);
    }

    async Task OnDidChangeModelContent(ModelContentChangedEvent e)
    {
        if (OnTextChanged.HasDelegate) await OnTextChanged.InvokeAsync(await Store.TextEditor!.GetValue());
    }

}
