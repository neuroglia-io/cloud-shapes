@*
    Copyright © 2025-Present The Cloud Shapes Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@using CloudShapes.Dashboard.Components.ProjectionDetailsStateManagement
@namespace CloudShapes.Dashboard.Components
@inherits StatefulComponent<ProjectionDetails, ProjectionDetailsStore, ProjectionDetailsState>
@inject IPluralize Pluralize
@inject NavigationManager Navigation

<div class="projection-details">
    <Tabs @ref="tabs" EnableFadeEffect="true" NavStyle="NavStyle.Underline" Class="justify-content-center">
        <Tab Title="Details" Active="true" Class="flex-grow-1 d-flex flex-column gap-3">
            <Content>
                @if (projection != null)
                {
                    @if (!isEditing)
                    {
                        <MonacoEditor Document="projection" OnTextChanged="textEditorInput.OnNext" Class="flex-grow-1" IsReadOnly="true">
                            <ExtraControls>
                                @if (!readOnly)
                                {
                                    <Button Outline="true" Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="(_) => Store.SetIsEditing(true)" TooltipTitle="Edit projection">
                                        <Icon Name="IconName.Pencil" />
                                    </Button>
                                }
                            </ExtraControls>
                        </MonacoEditor>
                    }
                    else
                    {
                        <MonacoEditor Document="projection" OnTextChanged="textEditorInput.OnNext" Class="flex-grow-1">
                            <ExtraControls>
                                <Button Outline="true" Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="(_) => Store.SetIsEditing(false)" TooltipTitle="View projection">
                                    <Icon Name="IconName.Eye" />
                                </Button>
                            </ExtraControls>
                        </MonacoEditor>
                    }
                }
                @if (problemDetails != null)
                {
                    <div class="problems px-3">
                        <Callout Color="CalloutColor.Danger" Heading="@problemDetails.Title" Class="position-relative m-0">
                            <Icon Name="IconName.X" Class="position-absolute" @onclick="() => Store.SetProblemDetails(null)" />
                            <p>@problemDetails.Detail</p>

                            @if (problemDetails.Errors != null && problemDetails.Errors.Any())
                            {
                                foreach (KeyValuePair<string, string[]> errorContainer in problemDetails.Errors)
                                {
                                    <strong>@errorContainer.Key:</strong>
                                    <ul>
                                        @foreach (string error in errorContainer.Value)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                }
                            }
                        </Callout>
                    </div>
                }
                @if (isEditing)
                {
                    <Button Disabled="isSaving" Color="ButtonColor.Primary" Loading="isSaving" @onclick="async _ => await Store.SaveProjectionAsync()">
                        <Icon Name="IconName.Save" />
                        Save
                    </Button>
                }
            </Content>
        </Tab>
        <Tab Title="Relationships">
            <Content>
                <div class="d-flex flex-wrap justify-content-center mt-3 gap-3">
                    @if (projectionType?.Relationships != null && projection != null && projectionType.Relationships.Count > 0)
                    {
                        @foreach (var relationship in projectionType.Relationships)
                        {
                            if (relationship.Type != "one-to-many")
                            {
                                <div class="cursor-pointer p-3 border rounded w-25" @onclick='(_) => Navigation.NavigateTo($"/projections/{Pluralize.Pluralize(relationship.Target).ToCamelCase()}/{projection.Find(relationship.Key)}")'>
                                    <Badge Class="w-100 text-truncate" Color="BadgeColor.Secondary" VisuallyHiddenText="Relationship type" IndicatorType="BadgeIndicatorType.RoundedPill">
                                        <Icon Name="IconName.Person"  />
                                        @relationship.Type
                                    </Badge><br />
                                    <Badge Class="w-100 text-truncate" Color="BadgeColor.Danger" VisuallyHiddenText="Relationship target" IndicatorType="BadgeIndicatorType.RoundedPill">@relationship.Target</Badge>
                                    <br />
                                    <Badge Class="w-100 text-truncate" Color="BadgeColor.Primary" VisuallyHiddenText="Relationship key" IndicatorType="BadgeIndicatorType.RoundedPill">@projection.Find(relationship.Key)</Badge>
                                </div>
                            }
                            else
                            {
                                var key = relationship.Key.Replace(":", @"\:");
                                var value = projection["_id"].ToString();
                                <div class="cursor-pointer p-3 border rounded w-25" @onclick='(_) => Navigation.NavigateTo($"/projections/{Pluralize.Pluralize(relationship.Target).ToCamelCase()}?filters={key}:{value}")'>
                                    <Badge Class="w-100 text-truncate" Color="BadgeColor.Secondary" VisuallyHiddenText="Relationship type" IndicatorType="BadgeIndicatorType.RoundedPill">
                                        <Icon Name="IconName.People"  />
                                        @relationship.Type
                                    </Badge><br />
                                    <Badge Class="w-100 text-truncate" Color="BadgeColor.Danger" VisuallyHiddenText="Relationship target" IndicatorType="BadgeIndicatorType.RoundedPill">@relationship.Target</Badge><br />
                                    <Badge Class="opacity-0">Space filling badge</Badge>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <p>No relationship found.</p>
                    }
                </div>
            </Content>
        </Tab>
    </Tabs>
</div>

@code {
    Tabs? tabs;
    ProjectionType? projectionType;
    IDictionary<string, object>? projection;
    bool readOnly = false;
    private ProblemDetails? problemDetails = null;
    bool isSaving = false;
    bool isEditing = false;
    private Subject<string> textEditorInput = new Subject<string>();

    [Parameter] public ProjectionType? ProjectionType { get; set; } = null!;

    [Parameter] public IDictionary<string, object>? Projection { get; set; } = null!;

    [Parameter] public bool ReadOnly { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Store.Projection.Subscribe(value => OnStateChanged(_ => projection = value), CancellationTokenSource.Token);
        Store.ProjectionType.Subscribe(value => OnStateChanged(_ => projectionType = value), CancellationTokenSource.Token);
        Store.IsSaving.Subscribe(value => OnStateChanged(_ => isSaving = value), CancellationTokenSource.Token);
        Store.IsEditing.Subscribe(value => OnStateChanged(_ => isEditing = value), CancellationTokenSource.Token);
        Store.ProblemDetails.Subscribe(value => OnStateChanged(_ => problemDetails = value), token: CancellationTokenSource.Token);
        textEditorInput
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .Subscribe(text => Store.SetProjectionValue(text));
    }

    /// <inheritdoc/>
    protected override async Task OnParametersSetAsync()
    {
        Store.SetIsSaving(false);
        Store.SetIsEditing(false);
        Store.SetProblemDetails(null);
        if (projectionType != ProjectionType) Store.SetProjectionType(ProjectionType);
        if (projection != Projection) Store.SetProjection(Projection);
        if (readOnly != ReadOnly) readOnly = ReadOnly;
        if (tabs != null) await tabs.ShowFirstTabAsync();
        await base.OnParametersSetAsync();
    }
}