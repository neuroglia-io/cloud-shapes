@*
    Copyright © 2025-Present The Cloud Shapes Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace CloudShapes.Dashboard.Pages.ProjectionTypes.List
@page "/types"
@using CloudShapes.Integration.Models
@inherits StatefulComponent<ProjectionTypeListStore, ProjectionTypeListState>
@inject IPluralize Pluralize
@inject NavigationManager Navigation
@inject JSInterop JSInterop

<ApplicationTitle>Projection Types</ApplicationTitle>

<div class="d-flex justify-content-between p-3">
    <h4>Projection Types</h4>
    <button class="btn btn-sm btn-primary" @onclick="OnNewProjectionType" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Plus" /></button>
</div>

@if (loading)
{
    <Loader />
}
else
{
    if (projectionTypes?.Items.Any() != true)
    {
        <p class="text-muted text-center my-auto">
            No projection types are currently defined. <a class="fw-bold" role="button" @onclick="OnNewProjectionType" @onclick:preventDefault="true" @onclick:stopPropagation="true">Click here</a> to create one.
        </p>
    }
    else
    {
        <div class="d-flex align-baseline px-3">
            <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" value="@queryOptions?.Search" @oninput="e => Store.SetSearchTerm(e.Value?.ToString())" />
            <div class="dropdown d-flex align-content-center">
                <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item @(selectedProjectionTypes.Count == 0 ? "text-mute" : "text-danger")" href="#" @onclick="async _ => await (selectedProjectionTypes.Count == 0 ?  Task.CompletedTask : OnDeleteSelectedProjectionTypesAsync())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete selected</a></li>
                </ul>
            </div>
        </div>
        <Pager Class="px-3" TotalLength="projectionTypes?.TotalCount ?? 0" OnPaged="OnPageChanged" PageIndex="(queryOptions?.Skip/(queryOptions?.Limit??1)) ?? 0" PageSize="queryOptions?.Limit ?? 50" />
        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th class="sticky-header">Name</th>
                        <th class="sticky-header">Description</th>
                        <th class="sticky-header text-center">Created At</th>
                        <th class="sticky-header text-center">Last Modified</th>
                        <th class="sticky-header text-center">Version</th>
                        <th class="sticky-header text-center">Indexes</th>
                        <th class="sticky-header text-center">Create Triggers</th>
                        <th class="sticky-header text-center">Update Triggers</th>
                        <th class="sticky-header text-center">Delete Triggers</th>
                        <th class="sticky-header text-center">Relationships</th>
                        <th class="sticky-header text-center">Projections</th>
                        <th class="fit"></th>
                        <th class="sticky-header text-center fit">
                            <input @ref="selectAllCheckbox" type="checkbox" @onclick="(_) => Store.ToggleProjectionTypeSelection()" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize @ref="Store.Virtualize" Context="projectionType" ItemsProvider="@Store.ProvideProjectionTypesAsync" ItemSize="61">
                        <ItemContent>
                            <tr class="cursor-pointer" @onclick='(_) => Navigation.NavigateTo($"/types/edit/{projectionType.Name}")'>
                                <td>@projectionType.Name</td>
                                <td><small><Markdown>@projectionType.Summary</Markdown></small></td>
                                <td class="text-center">@projectionType.Metadata.CreatedAt.AsMoment()</td>
                                <td class="text-center">@projectionType.Metadata.LastModified.AsMoment()</td>
                                <td class="text-center">@projectionType.Metadata.Version</td>
                                <td class="text-center">
                                    @if(projectionType.Indexes == null)
                                    {
                                        <span>-</span>
                                    }
                                    else
                                    {
                                        foreach(var index in projectionType.Indexes)
                                        {
                                            <div>
                                                @((MarkupString)string.Join(" + ", index.Properties.Select(f => $"<code>{f}</code>")))
                                            </div>
                                        }
                                    }
                                </td>
                                <td class="text-center">
                                    @foreach(var trigger in projectionType.Triggers.Create)
                                    {
                                        <div>
                                            <code>@trigger.Event.Type</code>
                                        </div>
                                    }
                                </td>
                                <td class="text-center">
                                    @if (projectionType.Triggers.Update == null)
                                    {
                                        <span>-</span>
                                    }
                                    else
                                    {
                                        foreach (var trigger in projectionType.Triggers.Update)
                                        {
                                            <div>
                                                <code>@trigger.Event.Type</code>
                                            </div>
                                        }
                                    }
                                </td>
                                <td class="text-center">
                                    @if (projectionType.Triggers.Delete == null)
                                    {
                                        <span>-</span>
                                    }
                                    else
                                    {
                                        foreach (var trigger in projectionType.Triggers.Delete)
                                        {
                                            <div>
                                                <code>@trigger.Event.Type</code>
                                            </div>
                                        }
                                    }
                                </td>
                                <td class="text-center">
                                    @if(projectionType.Relationships == null)
                                    {
                                        <span>-</span>
                                    }
                                    else
                                    {
                                        foreach(var relationship in projectionType.Relationships)
                                        {
                                            <div>
                                                <a href="#">@(relationship.Type == ProjectionRelationshipType.OneToOne ? relationship.Target : Pluralize.Pluralize(relationship.Target))</a>
                                            </div>
                                        }
                                    }
                                </td>
                                <td class="text-center">@projectionType.Metadata.ProjectionCount</td>
                                <td class="text-end">
                                    <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Pencil" /> Edit</a></li>
                                        <li><a class="dropdown-item text-danger" href="#" @onclick="async _ => await OnDeleteProjectionTypeAsync(projectionType)" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete</a></li>
                                    </ul>
                                </td>
                                <td class="text-center align-middle fit">
                                    <input type="checkbox" checked="@selectedProjectionTypes.Contains(projectionType.Name)" @onclick="(_) => Store.ToggleProjectionTypeSelection(projectionType.Name)" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr class="row-placeholder">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </table>
        </div>
        <Pager Class="px-3" TotalLength="projectionTypes?.TotalCount ?? 0" OnPaged="OnPageChanged" PageIndex="(queryOptions?.Skip/(queryOptions?.Limit??1)) ?? 0" PageSize="queryOptions?.Limit ?? 50" />
    }
}

<ConfirmDialog @ref="dialog" />

@code {
    ConfirmDialog? dialog;
    bool loading = true;
    PagedResult<ProjectionType>? projectionTypes;
    ElementReference? selectAllCheckbox;
    EquatableList<string> selectedProjectionTypes = [];
    QueryOptions? queryOptions;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Store.Loading.Subscribe(value => OnStateChanged(_ => loading = value), token: CancellationTokenSource.Token);
        Store.ProjectionTypes.Subscribe(value => OnStateChanged(_ => projectionTypes = value), CancellationTokenSource.Token);
        Store.QueryOptions.Subscribe(value => OnStateChanged(_ => queryOptions = value), token: CancellationTokenSource.Token);

        Store.SelectedProjectionTypes.SubscribeAsync(async selectedProjectionTypes =>
        {
            OnStateChanged(_ =>
            {
                this.selectedProjectionTypes = selectedProjectionTypes;
            });
            if (selectAllCheckbox.HasValue)
            {
                if (selectedProjectionTypes.Count == 0) await JSInterop.SetCheckboxStateAsync(selectAllCheckbox.Value, CloudShapes.Dashboard.CheckboxState.Unchecked);
                else if (selectedProjectionTypes.Count == (projectionTypes?.Items.Count() ?? 0)) await JSInterop.SetCheckboxStateAsync(selectAllCheckbox.Value, CloudShapes.Dashboard.CheckboxState.Checked);
                else await JSInterop.SetCheckboxStateAsync(selectAllCheckbox.Value, CloudShapes.Dashboard.CheckboxState.Indeterminate);
            }
        }, CancellationTokenSource.Token);
    }

    void OnNewProjectionType()
    {
        Navigation.NavigateTo("/types/new", false);
    }

    async Task OnDeleteProjectionTypeAsync(ProjectionType projectionType)
    {
        if (dialog == null) return;
        var confirmation = await dialog.ShowAsync(
            $"Are you sure you want to delete the '{projectionType.Name}' projection type?",
            $"The type and its {projectionType.Metadata.ProjectionCount} projection(s) will be permanently deleted. Are you sure you want to proceed?",
            new ConfirmDialogOptions()
            {
                YesButtonColor = ButtonColor.Danger,
                YesButtonText = "Yes",
                NoButtonText = "No",
                IsVerticallyCentered = true
            }
        );
        if (!confirmation) return;
        await this.Store.DeleteProjectionTypeAsync(projectionType.Name);
    }

    async Task OnDeleteSelectedProjectionTypesAsync()
    {
        if (dialog == null) return;
        if (selectedProjectionTypes.Count == 0) return;
        var confirmation = await dialog.ShowAsync(
            $"Are you sure you want to delete {selectedProjectionTypes.Count} projection type{(selectedProjectionTypes.Count > 1 ? "s" : "")}?",
            $"The deletion will be permanent. Are you sure you want to proceed ?",
            new ConfirmDialogOptions()
                {
                    YesButtonColor = ButtonColor.Danger,
                    YesButtonText = "Yes",
                    NoButtonText = "No",
                    IsVerticallyCentered = true
                }
        );
        if (!confirmation) return;
        await Store.DeleteSelectedProjectionTypesAsync();
        Store.ToggleProjectionTypeSelection();
    }

    void OnPageChanged(PageEvent pageEvent)
    {
        var skip = pageEvent.PageIndex * pageEvent.PageSize;
        var limit = pageEvent.PageSize;
        Store.SetSkip(skip);
        Store.SetLimit(limit);
    }

}