@namespace CloudShapes.Dashboard.Pages.ProjectionTypes.List
@page "/projections/types"
@inherits StatefulComponent<ProjectionTypeListStore, ProjectionTypeListState>
@inject IPluralize Pluralize

<ApplicationTitle>Projection Types</ApplicationTitle>

@if (loading)
{
    <Loader />
}
else
{
    <div class="table-container">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="sticky-header">Name</th>
                    <th class="sticky-header">Description</th>
                    <th class="sticky-header text-center">Created At</th>
                    <th class="sticky-header text-center">Last Modified</th>
                    <th class="sticky-header text-center">Version</th>
                    <th class="sticky-header text-center">Indexes</th>
                    <th class="sticky-header text-center">Create Triggers</th>
                    <th class="sticky-header text-center">Update Triggers</th>
                    <th class="sticky-header text-center">Delete Triggers</th>
                    <th class="sticky-header text-center">Relationships</th>
                    <th class="sticky-header text-center">Projections</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <Virtualize @ref="virtualize" Context="projectionType" ItemsProvider="@Store.ProvideProjectionTypesAsync" ItemSize="61">
                    <ItemContent>
                        <tr class="cursor-pointer">
                            <td>@projectionType.Name</td>
                            <td><small><Markdown>@projectionType.Summary</Markdown></small></td>
                            <td class="text-center">@projectionType.Metadata.CreatedAt.AsMoment()</td>
                            <td class="text-center">@projectionType.Metadata.LastModified.AsMoment()</td>
                            <td class="text-center">@projectionType.Metadata.Version</td>
                            <td class="text-center">
                                @if(projectionType.Indexes == null)
                                {
                                    <span>-</span>
                                }
                                else
                                {
                                    foreach(var index in projectionType.Indexes)
                                    {
                                        <div>
                                            @((MarkupString)string.Join(" + ", index.Fields.Select(f => $"<code>{f}</code>")))
                                        </div>
                                    }
                                }
                            </td>
                            <td class="text-center">
                                @foreach(var trigger in projectionType.Triggers.Create)
                                {
                                    <div>
                                        <code>@trigger.Event.Type</code>
                                    </div>
                                }
                            </td>
                            <td class="text-center">
                                @if (projectionType.Triggers.Update == null)
                                {
                                    <span>-</span>
                                }
                                else
                                {
                                    foreach (var trigger in projectionType.Triggers.Update)
                                    {
                                        <div>
                                            <code>@trigger.Event.Type</code>
                                        </div>
                                    }
                                }
                            </td>
                            <td class="text-center">
                                @if (projectionType.Triggers.Delete == null)
                                {
                                    <span>-</span>
                                }
                                else
                                {
                                    foreach (var trigger in projectionType.Triggers.Delete)
                                    {
                                        <div>
                                            <code>@trigger.Event.Type</code>
                                        </div>
                                    }
                                }
                            </td>
                            <td class="text-center">
                                @if(projectionType.Relationships == null)
                                {
                                    <span>-</span>
                                }
                                else
                                {
                                    foreach(var relationship in projectionType.Relationships)
                                    {
                                        <div>
                                            <a href="/projections/types/@relationship.Target">@(relationship.Type == ProjectionRelationshipType.OneToOne ? relationship.Target : Pluralize.Pluralize(relationship.Target))</a>
                                        </div>
                                    }
                                }
                            </td>
                            <td class="text-center">@projectionType.Metadata.ProjectionCount</td>
                            <td class="text-end">
                                <button class="btn btn-outline-primary btn-sm" title="Edit the projection" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /></button>
                                <button class="btn btn-sm btn-outline-danger" title="Delete the projection" @onclick="async _ => await Store.DeleteProjectionTypeAsync(projectionType)" @onclick:preventDefault @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /></button>
                            </td>
                        </tr>
                    </ItemContent>
                    <Placeholder>
                        <tr class="row-placeholder">
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    </Placeholder>
                </Virtualize>
            </tbody>
        </table>
    </div>
}

@code {

    Virtualize<ProjectionType>? virtualize;
    bool loading = true;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Store.Loading.Subscribe(value => OnStateChanged(_ => loading = value), token: CancellationTokenSource.Token);
        Store.ProjectionTypes.SubscribeAsync(async _ =>
        {
            if (virtualize == null) return;
            await virtualize.RefreshDataAsync();
            OnStateChanged(_ => { });
        }, CancellationTokenSource.Token);
    }

}