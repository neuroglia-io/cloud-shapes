@*
    Copyright © 2025-Present The Cloud Shapes Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace CloudShapes.Dashboard.Pages.Projections.List
@page "/"
@page "/projections"
@page "/{projectionTypeName?}"
@using CloudShapes.Integration.Models
@inherits StatefulComponent<ProjectionListStore, ProjectionListState>
@inject JSInterop JSInterop
@inject IPluralize Pluralize
@inject NavigationManager Navigation

<PageTitle>Cloud Shapes - @(string.IsNullOrWhiteSpace(ProjectionTypeName) ? "Projections" : CultureInfo.InvariantCulture.TextInfo.ToTitleCase(ProjectionTypeName))</PageTitle>

@if (loading)
{
    <Loader />
}
else
{
    if (projectionType == null)
    {
        <p class="text-muted text-center my-auto">
            No projection types are currently defined. <a class="fw-bold" role="button" @onclick="OnCreateProjectionType" @onclick:preventDefault="true" @onclick:stopPropagation="true">Click here</a> to create one.
        </p>
    }
    else
    {
        <div class="d-flex flex-grow">
            <Sidebar @ref="sidebar" Class="d-flex d-flex flex-column" Href="/projections/types" IconName="IconName.Layers" Title="Types" DataProvider="Store.ProvideSidebarDataAsync" />
            <div class="w-100 p-3 d-flex flex-column">
                <div class="projection-info pb-3">
                    <div class="d-flex justify-content-between">
                        <div class="d-flex gap-3 align-items-center">
                            <h4>@Pluralize.Pluralize(projectionType.Name)</h4>
                            @if (!string.IsNullOrEmpty(projectionType.Description))
                            {
                                <Icon Name="IconName.InfoCircleFill" Color="IconColor.Primary" @onclick="async () => { await descriptionModal!.ShowAsync(); }" Class="cursor-pointer mb-2" />
                            }
                        </div>
                        <button class="btn btn-sm btn-primary" title="Create new projection" @onclick="OnCreateProjectionAsync" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Plus" /></button>
                    </div>
                    @if (!string.IsNullOrEmpty(projectionType.Summary)) 
                    {
                        <Markdown>@projectionType.Summary</Markdown>
                    }
                </div>
                <div class="d-flex align-baseline">
                    <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" value="@queryOptions?.Search" @oninput="e => Store.SetSearchTerm(e.Value?.ToString())" />
                    <div class="dropdown d-flex align-content-center">
                        <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item @(selectedProjections.Count == 0 ? "text-mute" : "text-danger")" href="#" @onclick="async _ => await (selectedProjections.Count == 0 ?  Task.CompletedTask : OnDeleteSelectedProjectionsAsync())" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete selected</a></li>
                        </ul>
                    </div>
                </div>
                <Pager TotalLength="projections?.Count() ?? 0" OnPaged="OnPageChanged" PageIndex="(queryOptions?.Skip/(queryOptions?.Limit??1)) ?? 0" PageSize="queryOptions?.Limit ?? 50" />
                <div class="table-container border-top border-bottom">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th class="sticky-header">Id</th>
                                <th class="sticky-header text-center">Created At</th>
                                <th class="sticky-header text-center">Last Modified</th>
                                <th class="sticky-header text-center">Version</th>
                                <th class="sticky-header text-end"></th>
                                <th class="sticky-header text-center fit">
                                    <input @ref="selectAllCheckbox" type="checkbox" @onclick="(_) => Store.ToggleProjectionSelection()" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize @ref="Store.Virtualize" Context="projection" ItemsProvider="@Store.ProvideProjectionsAsync" ItemSize="61">
                                <ItemContent>
                                    @{
                                        var projectionId = (string)projection["_id"];
                                    }
                                    <tr @onclick="async _ => await OnShowProjectionOffcanvasAsync(projection)" class="cursor-pointer">
                                        <td>@projectionId</td>
                                        <td class="text-center">@DateTimeOffset.Parse((string)projection.Find("_metadata.createdAt")!).AsMoment()</td>
                                        <td class="text-center">@DateTimeOffset.Parse((string)projection.Find("_metadata.lastModified")!).AsMoment()</td>
                                        <td class="text-center">@projection.Find("_metadata.version")</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                            <ul class="dropdown-menu">
                                                <li><a class="dropdown-item" href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Pencil" /> Edit</a></li>
                                                <li><a class="dropdown-item text-danger" href="#" @onclick="async _ => await OnDeleteProjectionAsync(projectionId)" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete</a></li>
                                            </ul>
                                        </td>
                                        <td class="text-center align-middle fit">
                                            <input type="checkbox" checked="@selectedProjections.Contains(projectionId)" @onclick="(_) => Store.ToggleProjectionSelection(projectionId)" @onclick:preventDefault="true" @onclick:stopPropagation="true" />
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr class="row-placeholder">
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </table>
                </div>
                <Pager TotalLength="projections?.Count() ?? 0" OnPaged="OnPageChanged" PageIndex="(queryOptions?.Skip/(queryOptions?.Limit??1)) ?? 0" PageSize="queryOptions?.Limit ?? 50" />
            </div>
        </div>
    }

}

<Offcanvas @ref="offcanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex" />
<ConfirmDialog @ref="dialog" />
<Modal @ref="modal" Size="ModalSize.Large" IsVerticallyCentered="true" />

<Modal @ref="descriptionModal" Size="ModalSize.Large" IsVerticallyCentered="true">
    <HeaderTemplate>
        @(projectionType!.Name) - Description
    </HeaderTemplate>
    <BodyTemplate>
        <Markdown>@projectionType!.Description</Markdown>
    </BodyTemplate>
</Modal>

@code {
    Sidebar? sidebar;
    Collapse? descriptionCollapse;
    Modal? descriptionModal;
    Offcanvas? offcanvas;
    ConfirmDialog? dialog;
    Modal? modal;
    bool loading = true;
    string? projectionTypeName;
    ProjectionType? projectionType;
    ElementReference? selectAllCheckbox;
    IEnumerable<IDictionary<string, object>>? projections;
    EquatableList<string> selectedProjections = [];
    QueryOptions? queryOptions;

    [Parameter] public string? ProjectionTypeName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Store.Loading.Subscribe(value => OnStateChanged(_ => loading = value), token: CancellationTokenSource.Token);
        Store.Projections.Subscribe(value => OnStateChanged(_ => projections = value?.Items), CancellationTokenSource.Token);
        Store.ProjectionType.Subscribe(value => OnStateChanged(_ => projectionType = value), token: CancellationTokenSource.Token);
        Store.QueryOptions.Subscribe(value => OnStateChanged(_ => queryOptions = value), token: CancellationTokenSource.Token);
        Store.ProjectionTypes.SubscribeAsync(async _ =>
        {
            if (sidebar == null) return;
            await sidebar.RefreshDataAsync();
            OnStateChanged(_ => { });
        }, CancellationTokenSource.Token);
        Store.SelectedProjections.SubscribeAsync(async selectedProjections =>
        {
            OnStateChanged(_ =>
            {
                this.selectedProjections = selectedProjections;
            });
            if (selectAllCheckbox.HasValue)
            {
                if (selectedProjections.Count == 0) await JSInterop.SetCheckboxStateAsync(selectAllCheckbox.Value, CloudShapes.Dashboard.CheckboxState.Unchecked);
                else if (selectedProjections.Count == (projections?.Count() ?? 0)) await JSInterop.SetCheckboxStateAsync(selectAllCheckbox.Value, CloudShapes.Dashboard.CheckboxState.Checked);
                else await JSInterop.SetCheckboxStateAsync(selectAllCheckbox.Value, CloudShapes.Dashboard.CheckboxState.Indeterminate);
            }
        }, CancellationTokenSource.Token);
        if(!string.IsNullOrWhiteSpace(ProjectionTypeName)) Store.SetProjectionTypeName(ProjectionTypeName);
        if(projectionType != null) Navigation.NavigateTo($"/{Pluralize.Pluralize(projectionType.Name)}", false);
    }

    protected override void OnParametersSet()
    {
        if (projectionTypeName != ProjectionTypeName) 
        {
            projectionTypeName = ProjectionTypeName;
            if(!string.IsNullOrWhiteSpace(projectionTypeName)) Store.SetProjectionTypeName(projectionTypeName);
        }
        base.OnParametersSet();
    }

    void OnCreateProjectionType()
    {
        Navigation.NavigateTo("/projections/types/new", false);
    }

    async Task OnCreateProjectionAsync()
    {
        if (modal == null) return;
        var parameters = new Dictionary<string, object>();
        parameters[nameof(CreateProjectionModal.ProjectionType)] = projectionType!;
        parameters[nameof(CreateProjectionModal.OnCancel)] = EventCallback.Factory.Create(this, async _ =>
        {
            await modal.HideAsync();
        });
        parameters[nameof(CreateProjectionModal.OnCreate)] = EventCallback.Factory.Create<object>(this, async trigger =>
        {
            await modal.HideAsync();
        });
        await modal.ShowAsync<CreateProjectionModal>($"New {projectionType!.Name}", null, parameters);
    }

    async Task OnDeleteProjectionAsync(string projectionId)
    {
        if (dialog == null) return;
        var type = projectionType!.Name.SplitCamelCase();
        type = string.Join(' ', type.Split(' ').Select(c => c.ToLowerInvariant()));
        var confirmation = await dialog.ShowAsync(
            $"Are you sure you want to delete the {type} with id '{projectionId}'?",
            $"The {type} will be permanently deleted. Are you sure you want to proceed?",
            new ConfirmDialogOptions()
            {
                YesButtonColor = ButtonColor.Danger,
                YesButtonText = "Delete",
                NoButtonText = "Abort",
                IsVerticallyCentered = true
            }
        );
        if (!confirmation) return;
        await this.Store.DeleteProjectionAsync(projectionId);
    }

    async Task OnDeleteSelectedProjectionsAsync()
    {
        if (dialog == null) return;
        if (selectedProjections.Count == 0) return;
        var type = projectionType!.Name.SplitCamelCase();
        var typeComponents = type.Split(' ').Select(c => c.ToLowerInvariant()).ToArray();
        if (selectedProjections.Count > 1) typeComponents[typeComponents.Length - 1] = Pluralize.Pluralize(typeComponents[typeComponents.Length - 1]);
        type = string.Join(' ', typeComponents);
        var confirmation = await dialog.ShowAsync(
            $"Are you sure you want to delete {selectedProjections.Count} {type}?",
            $"The {type} will be permanently deleted. Are you sure you want to proceed ?",
            new ConfirmDialogOptions()
            {
                YesButtonColor = ButtonColor.Danger,
                YesButtonText = "Yes",
                NoButtonText = "No",
                IsVerticallyCentered = true
            }
        );
        if (!confirmation) return;
        await Store.DeleteSelectedProjectionsAsync();
        Store.ToggleProjectionSelection();
    }

    async Task OnShowProjectionOffcanvasAsync(IDictionary<string, object> projection)
    {
        if (this.offcanvas == null) return;
        var parameters = new Dictionary<string, object>();
        parameters.Add(nameof(ProjectionDetails.ProjectionType), projectionType!);
        parameters.Add(nameof(ProjectionDetails.Projection), projection);
        await this.offcanvas.ShowAsync<ProjectionDetails>(title: $"{CultureInfo.InvariantCulture.TextInfo.ToTitleCase(projectionType!.Name)} {projection["_id"]}", parameters: null);
        await this.offcanvas.ShowAsync<ProjectionDetails>(title: $"{CultureInfo.InvariantCulture.TextInfo.ToTitleCase(projectionType!.Name)} {projection["_id"]}", parameters: parameters);
        return;
    }

    void OnPageChanged(PageEvent pageEvent)
    {
        var skip = pageEvent.PageIndex * pageEvent.PageSize;
        var limit = pageEvent.PageSize;
        Store.SetSkip(skip);
        Store.SetLimit(limit);
    }

}
