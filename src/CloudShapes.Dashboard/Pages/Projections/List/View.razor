@namespace CloudShapes.Dashboard.Pages.Projections.List
@page "/"
@page "/projections"
@page "/{projectionTypeName?}"
@inherits StatefulComponent<ProjectionListStore, ProjectionListState>

<PageTitle>Cloud Streams - @(string.IsNullOrWhiteSpace(ProjectionTypeName) ? "Projections" : CultureInfo.InvariantCulture.TextInfo.ToTitleCase(ProjectionTypeName))</PageTitle>

@if (loading)
{
    <Loader />
}
else
{
    <div class="d-flex">
        <Sidebar Href="/projections/types" IconName="IconName.Layers" Title="Types" DataProvider="Store.ProvideSidebarDataAsync" />
        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th class="sticky-header">Id</th>
                        <th class="sticky-header text-center">Created At</th>
                        <th class="sticky-header text-center">Last Modified</th>
                        <th class="sticky-header text-center">Version</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize @ref="virtualize" Context="projection" ItemsProvider="@Store.ProvideProjectionsAsync" ItemSize="61">
                        <ItemContent>
                            <tr @onclick="async _ => await OnShowProjectionOffcanvasAsync(projection)" class="cursor-pointer">
                                <td>@projection["_id"]</td>
                                <td class="text-center">@(((DateTimeOffset)projection.Find("_metadata.createdAt")!).AsMoment())</td>
                                <td class="text-center">@(((DateTimeOffset)projection.Find("_metadata.lastModified")!).AsMoment())</td>
                                <td class="text-center">@projection.Find("_metadata.version")</td>
                                <td class="text-end">
                                    <button class="btn btn-outline-primary btn-sm" title="Edit the projection" @onclick:preventDefault @onclick:stopPropagation><Icon Name="IconName.Pencil" /></button>
                                    <button class="btn btn-sm btn-outline-danger" title="Delete the projection" @onclick:preventDefault @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /></button>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr class="row-placeholder">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    </div>
}

<Offcanvas @ref="offcanvas" Size="OffcanvasSize.Large" ReadOnly="true" UseStaticBackdrop="false" />

@code {

    Offcanvas? offcanvas;
    Virtualize<IDictionary<string, object>>? virtualize;
    bool loading = true;
    string? projectionTypeName;
    ProjectionType? projectionType;

    [Parameter] public string? ProjectionTypeName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Store.Loading.Subscribe(value => OnStateChanged(_ => loading = value), token: CancellationTokenSource.Token);
        Store.ProjectionType.Subscribe(value => OnStateChanged(_ => projectionType = value), token: CancellationTokenSource.Token);
        Store.Projections.SubscribeAsync(async _ => 
        {
            if (virtualize == null) return;
            await virtualize.RefreshDataAsync();
            OnStateChanged(_ => { });
        }, CancellationTokenSource.Token);
        if(!string.IsNullOrWhiteSpace(ProjectionTypeName)) Store.SetProjectionTypeName(ProjectionTypeName);
    }

    protected override void OnParametersSet()
    {
        if (projectionTypeName != ProjectionTypeName) 
        {
            projectionTypeName = ProjectionTypeName;
            if(!string.IsNullOrWhiteSpace(projectionTypeName)) Store.SetProjectionTypeName(projectionTypeName);
        }
        base.OnParametersSet();
    }

    Task OnShowProjectionOffcanvasAsync(IDictionary<string, object> projection)
    {
        if (this.offcanvas == null) return Task.CompletedTask;
        var parameters = new Dictionary<string, object>();
        parameters.Add(nameof(ProjectionDetails.ReadOnly), true);
        parameters.Add(nameof(ProjectionDetails.ProjectionType), projectionType!);
        parameters.Add(nameof(ProjectionDetails.Projection), projection);
        return this.offcanvas.ShowAsync<ProjectionDetails>(title: $"{CultureInfo.InvariantCulture.TextInfo.ToTitleCase(projectionType!.Name)} {projection["_id"]}", parameters: parameters);
    }

}
